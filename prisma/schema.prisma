// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String
  exams    Exam[]
}

model ValidToken {
  token     String   @id @default(uuid())
  createdAt DateTime @default(now())
}

model Exam {
  id        String     @id @default(uuid())
  title     String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  questions Question[]
  created   DateTime   @default(now())
  startTime DateTime?
  endtime   DateTime?
}

model Question {
  id      String            @id @default(uuid())
  exam    Exam              @relation(fields: [examId], references: [id])
  examId  String
  context QuestionContext[]
  options Option[]
  answer  String?
}

model QuestionContext {
  id           String   @id @default(uuid())
  question     Question @relation(fields: [questionId], references: [id])
  questionId   String
  linePosition Int      @default(autoincrement())
  type         String?
  url          String?
  text         String?
}

model Option {
  id         String          @id @default(uuid())
  question   Question        @relation(fields: [questionId], references: [id])
  questionId String
  context    OptionContext[]
}

model OptionContext {
  id           String  @id @default(uuid())
  option       Option  @relation(fields: [optionId], references: [id])
  optionId     String
  type         String?
  url          String?
  text         String?
  linePosition Int     @default(autoincrement())
}

model UserResult {
  id     String   @id @default(uuid())
  userId String
  examId String
  score  Int
  time   DateTime @default(now())
}
